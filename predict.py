import cv2
import numpy as np
import tkinter as tk
from tkinter import filedialog
from threading import Thread
from tensorflow.keras.models import load_model # type: ignore
from tensorflow.keras.preprocessing.image import img_to_array, load_img # type: ignore
import os
from config import MODEL_PATH, IMG_SIZE

# Load m√¥ h√¨nh
model = load_model(MODEL_PATH)

# Bi·∫øn d·ª´ng t·∫•t c·∫£ lo·∫°i detect
stop_detection = False

# H√†m hi·ªÉn th·ªã ·∫£nh g·ªëc v√† ·∫£nh detect
def process_and_display(image, prediction, window_name="Result"):
    image_resized = cv2.resize(image, (IMG_SIZE, IMG_SIZE))
    mask = (prediction.squeeze() * 255).astype(np.uint8)
    mask = cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY)[1]

    # Gh√©p ·∫£nh g·ªëc v√† mask c·∫°nh nhau
    combined = cv2.hconcat([image_resized, cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)])

    cv2.imshow(window_name, combined)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

# H√†m d·ª± ƒëo√°n tr√™n ·∫£nh
def predict_image(image_path):
    global stop_detection
    if stop_detection:
        return
    
    img = load_img(image_path, target_size=(IMG_SIZE, IMG_SIZE))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)[0]
    prediction = (prediction > 0.5).astype(np.uint8)

    original = cv2.imread(image_path)
    process_and_display(original, prediction, window_name="Image Detection")

# H√†m nh·∫≠n di·ªán v·∫øt n·ª©t t·ª´ video (hi·ªÉn th·ªã ·∫£nh g·ªëc v√† mask c√πng l√∫c)
def predict_video(video_path):
    global stop_detection
    cap = cv2.VideoCapture(video_path)

    while cap.isOpened():
        if stop_detection:
            break

        ret, frame = cap.read()
        if not ret:
            break

        frame_resized = cv2.resize(frame, (IMG_SIZE, IMG_SIZE))
        img_array = img_to_array(frame_resized) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        prediction = model.predict(img_array)[0]
        prediction = (prediction > 0.5).astype(np.uint8)

        mask = (prediction.squeeze() * 255).astype(np.uint8)
        mask = cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY)[1]

        # Gh√©p ·∫£nh g·ªëc v√† mask c·∫°nh nhau
        combined = cv2.hconcat([frame_resized, cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)])

        cv2.imshow("Video Crack Detection", combined)

        if cv2.waitKey(10) & 0xFF == ord('q') or stop_detection:
            break

    cap.release()
    cv2.destroyAllWindows()

# H√†m ch·∫°y camera detection
def predict_camera():
    global stop_detection
    stop_detection = False

    cap = cv2.VideoCapture(0)  # M·ªü camera

    while not stop_detection:
        ret, frame = cap.read()
        if not ret:
            break

        frame_resized = cv2.resize(frame, (IMG_SIZE, IMG_SIZE))
        img_array = img_to_array(frame_resized) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        prediction = model.predict(img_array)[0]
        prediction = (prediction > 0.5).astype(np.uint8)

        mask = (prediction.squeeze() * 255).astype(np.uint8)
        mask = cv2.threshold(mask, 127, 255, cv2.THRESH_BINARY)[1]

        # Gh√©p ·∫£nh g·ªëc v√† mask c·∫°nh nhau
        combined = cv2.hconcat([frame_resized, cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)])

        cv2.imshow("Real-Time Crack Detection", combined)

        if cv2.waitKey(1) & 0xFF == ord('q') or stop_detection:
            break

    cap.release()
    cv2.destroyAllWindows()

# H√†m th·ª±c hi·ªán inference tr√™n to√†n b·ªô th∆∞ m·ª•c ·∫£nh
def predict_folder():
    global stop_detection
    stop_detection = False

    folder_path = filedialog.askdirectory()
    if not folder_path:
        return  # Ng∆∞·ªùi d√πng b·∫•m cancel

    image_files = [f for f in os.listdir(folder_path) if f.endswith((".jpg", ".png"))]
    
    if not image_files:
        print("‚ùå Kh√¥ng c√≥ ·∫£nh n√†o trong th∆∞ m·ª•c n√†y!")
        return

    for image_name in image_files:
        if stop_detection:
            break
        image_path = os.path.join(folder_path, image_name)
        print(f"üîç ƒêang x·ª≠ l√Ω: {image_path}")
        predict_image(image_path)

# H√†m d·ª´ng t·∫•t c·∫£ c√°c lo·∫°i detection
def stop_all_detection():
    global stop_detection
    stop_detection = True
    print("üõë ƒê√£ d·ª´ng t·∫•t c·∫£ qu√° tr√¨nh nh·∫≠n di·ªán!")

# H√†m ch·ªçn file t·ª´ m√°y (·∫¢nh & Video chung)
def open_file():
    file_path = filedialog.askopenfilename(filetypes=[("Image & Video files", "*.jpg;*.png;*.mp4;*.avi")])
    if file_path.endswith((".jpg", ".png")):
        Thread(target=predict_image, args=(file_path,)).start()
    elif file_path.endswith((".mp4", ".avi")):
        Thread(target=predict_video, args=(file_path,)).start()

# Giao di·ªán ch·ªçn ch·∫ø ƒë·ªô
def main():
    root = tk.Tk()
    root.title("Crack Detection")
    root.geometry("400x300")

    tk.Label(root, text="Ch·ªçn ch·∫ø ƒë·ªô nh·∫≠n di·ªán v·∫øt n·ª©t", font=("Arial", 12)).pack(pady=10)

    btn_camera = tk.Button(root, text="üì∑ Camera Detection", command=lambda: Thread(target=predict_camera).start(), font=("Arial", 10))
    btn_camera.pack(pady=5)

    btn_file = tk.Button(root, text="üìÇ Load Image/Video", command=open_file, font=("Arial", 10))
    btn_file.pack(pady=5)

    btn_folder = tk.Button(root, text="üìÇ Inference Folder", command=lambda: Thread(target=predict_folder).start(), font=("Arial", 10))
    btn_folder.pack(pady=5)

    btn_stop = tk.Button(root, text="üõë STOP DETECTION", command=stop_all_detection, font=("Arial", 10), fg="red")
    btn_stop.pack(pady=5)

    btn_exit = tk.Button(root, text="‚ùå Tho√°t", command=root.quit, font=("Arial", 10))
    btn_exit.pack(pady=5)

    root.mainloop()

# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    main()
